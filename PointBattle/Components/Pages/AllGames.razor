@page "/allgames"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject LocalizationService Loc
@implements IDisposable

<div class="all-games-container">
    <div class="page-header">
        <button class="back-button" @onclick="BackToHistory">
            <span>‚Üê</span> <LocalizedText Key="BackToHistory" />
        </button>
        <h2><LocalizedText Key="AllGames" /></h2>
    </div>

    @if (loading)
    {
        <div class="loading"><LocalizedText Key="Loading" /></div>
    }
    else if (games.Count == 0)
    {
        <p><LocalizedText Key="NoGamesYet" /></p>
    }
    else
    {
        <div class="game-filter">
            <input type="text" placeholder="@Loc.GetString("SearchPlayers")" @bind="searchText" @bind:event="oninput" @onkeyup="FilterGames" />
        </div>

        <div class="games-list">
            @foreach (var game in filteredGames)
            {
                <div class="game-card">
                    <div class="game-card-content" @onclick="() => ViewGame(game.Id)">
                        <div class="game-date">@game.Date.ToString("MMM d, yyyy")</div>
                        <div class="game-teams">@game.GroupAFullName <LocalizedText Key="VS" /> @game.GroupBFullName</div>
                        <div class="game-score">@game.GroupATotal - @game.GroupBTotal</div>
                        <div class="game-winner">
                            @if (game.GroupATotal > game.GroupBTotal)
                            {
                                <span class="winner-text">@game.GroupAFullName <LocalizedText Key="WinsExcl" /></span>
                            }
                            else if (game.GroupBTotal > game.GroupATotal)
                            {
                                <span class="winner-text">@game.GroupBFullName <LocalizedText Key="WinsExcl" /></span>
                            }
                            else
                            {
                                <span><LocalizedText Key="TieGame" /></span>
                            }
                        </div>
                    </div>
                    <div class="game-card-actions">
                        <button class="edit-button" @onclick:stopPropagation="true" @onclick="() => NavigateToEditGame(game.Id)"><LocalizedText Key="Edit" /></button>
                        <button class="delete-button" @onclick="() => DeleteGame(game.Id)"><LocalizedText Key="Delete" /></button>
                    </div>
                </div>
            }
        </div>
    }
    @if (gameToEdit != null)
    {
        <EditGameModal game="@gameToEdit" OnCancel="CancelEdit" OnSave="FinishEdit" />
    }
</div>

@code {
    private List<Game> games = new List<Game>();
    private List<Game> filteredGames = new List<Game>();
    private string searchText = "";
    private bool loading = true;
    private Game gameToEdit = null;

    private void EditGame(Game game)
    {
        gameToEdit = game;
    }
    private void NavigateToEditGame(int gameId)
    {
        Navigation.NavigateTo($"/editgame/{gameId}");
    }
    private void CancelEdit()
    {
        gameToEdit = null;
    }

    private async Task FinishEdit()
    {
        gameToEdit = null;
        await LoadGames();
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await LoadGames();
        loading = false;
    }

    private async Task LoadGames()
    {
        games = await DbService.GetGamesAsync();
        FilterGames();
    }

    private void FilterGames()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredGames = games.OrderByDescending(g => g.Date).ToList();
        }
        else
        {
            filteredGames = games
                .Where(g => 
                    (g.GroupA?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (g.GroupAMember2?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (g.GroupB?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (g.GroupBMember2?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
                .OrderByDescending(g => g.Date)
                .ToList();
        }
    }

    private void ViewGame(int id)
    {
        Navigation.NavigateTo($"/gameresult/{id}");
    }

    private async void DeleteGame(int id)
    {
        await DbService.DeleteGameAsync(id);
        await LoadGames();
        StateHasChanged();
    }

    private void BackToHistory()
    {
        Navigation.NavigateTo("/history");
    }

    protected override void OnInitialized()
    {
        // Subscribe to language changes
        Loc.OnLanguageChanged += OnLanguageChanged;
        base.OnInitialized();
    }

    private void OnLanguageChanged()
    {
        // Update UI when language changes
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        Loc.OnLanguageChanged -= OnLanguageChanged;
    }
}