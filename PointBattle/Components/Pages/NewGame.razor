@page "/newgame"
@using PointBattle.Models
@using PointBattle.Services
@inject NavigationManager Navigation
@inject DatabaseService DbService

<div class="container">
    <h2>New Game</h2>

    <div class="teams-container">
        <div class="team-setup">
            <h3>Team 1</h3>
            <div class="form-group">
                <label>Player 1:</label>
                <input list="player-names" @bind="groupAName" placeholder="Player Name"/>
            </div>
            <div class="form-group">
                <label>Player 2 (optional):</label>
                <input list="player-names" @bind="groupAMember2" placeholder="Player Name"/>
            </div>
        </div>

        <div class="team-setup">
            <h3>Team 2</h3>
            <div class="form-group">
                <label>Player 1:</label>
                <input list="player-names" @bind="groupBName" placeholder="Player Name"/>
            </div>
            <div class="form-group">
                <label>Player 2 (optional):</label>
                <input list="player-names" @bind="groupBMember2" placeholder="Player Name"/>
            </div>
        </div>
    </div>

    <datalist id="player-names">
        @foreach (var name in playerNames)
        {
            <option value="@name"/>
        }
    </datalist>

    <div class="button-container">
        <button class="btn secondary" @onclick="Cancel">Cancel</button>
        <button class="btn primary" @onclick="StartGame">Start Game</button>
    </div>
</div>

@code {
    private string groupAName = "";
    private string groupAMember2 = "";
    private string groupBName = "";
    private string groupBMember2 = "";
    private List<string> playerNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        playerNames = await DbService.GetAllPlayerNamesAsync();
    }
    
    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private async Task StartGame()
    {
        var game = new Game
        {
            GroupA = !string.IsNullOrWhiteSpace(groupAName) ? groupAName : "Player 1",
            GroupAMember2 = groupAMember2,
            GroupB = !string.IsNullOrWhiteSpace(groupBName) ? groupBName : "Player 1",
            GroupBMember2 = groupBMember2,
            Date = DateTime.Now,
            IsCompleted = false,
            Rounds = new List<Round>()
        };

        // Save to database
        var id = await DbService.SaveGameAsync(game);
        

        // Now if we have a valid ID, navigate to the game screen
        if (id > 0)
        {
            Navigation.NavigateTo($"/game/{id}", forceLoad: true);
        }
        else
        {
            // Add error handling if we don't get a valid ID
            Console.WriteLine("Error: Failed to create new game");
        }
    }

}