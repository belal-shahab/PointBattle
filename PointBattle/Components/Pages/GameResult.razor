@page "/gameresult/{Id:int}"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation

<div class="result-container">
    <h2>Game Result</h2>

    <div class="final-score">
        <div class="team">
            <h3>@game.GroupA</h3>
            <div class="points @(game.GroupATotal > game.GroupBTotal ? "winner" : "")">
                @game.GroupATotal
            </div>
        </div>
        <div class="vs">VS</div>
        <div class="team">
            <h3>@game.GroupB</h3>
            <div class="points @(game.GroupBTotal > game.GroupATotal ? "winner" : "")">
                @game.GroupBTotal
            </div>
        </div>
    </div>

    @if (game.GroupATotal > game.GroupBTotal)
    {
        <div class="winner-announcement">
            <h2 class="winner-text">@game.GroupA Wins!</h2>
        </div>
    }
    else if (game.GroupBTotal > game.GroupATotal)
    {
        <div class="winner-announcement">
            <h2 class="winner-text">@game.GroupB Wins!</h2>
        </div>
    }
    else
    {
        <div class="winner-announcement">
            <h2 class="winner-text">It's a Tie!</h2>
        </div>
    }

    <div class="round-summary">
        <h3>Round Summary</h3>
        <div class="rounds-table">
            <table>
                <thead>
                <tr>
                    <th>Round</th>
                    <th>@game.GroupA</th>
                    <th>@game.GroupB</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var round in game.Rounds)
                {
                    <tr>
                        <td>Round @round.RoundNumber</td>
                        <td>@round.GroupAPoints</td>
                        <td>@round.GroupBPoints</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <div class="button-container">
        <button class="btn secondary" @onclick="BackToHome">Home</button>
        <button class="btn warning" @onclick="NavigateToEditGame">Edit Game</button>
        <button class="btn primary" @onclick="NewGame">New Game</button>
    </div>
    
    @if (isEditing)
    {
        <div class="modal-overlay" @onclick="CancelEdit">
            <div class="modal" @onclick:stopPropagation="true">
                <h3>Edit Game</h3>
            
                <div class="input-group">
                    <label>Team 1 Player:</label>
                    <input type="text" @bind="editedGame.GroupA" />
                </div>
            
                <div class="input-group">
                    <label>Team 1 Player 2 (Optional):</label>
                    <input type="text" @bind="editedGame.GroupAMember2" />
                </div>
            
                <div class="input-group">
                    <label>Team 2 Player:</label>
                    <input type="text" @bind="editedGame.GroupB" />
                </div>
            
                <div class="input-group">
                    <label>Team 2 Player 2 (Optional):</label>
                    <input type="text" @bind="editedGame.GroupBMember2" />
                </div>
            
                <div class="modal-actions">
                    <button class="btn secondary" @onclick="CancelEdit">Cancel</button>
                    <button class="btn primary" @onclick="SaveEdit">Save</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Game game = new Game();
    private bool isEditing = false;
    private Game editedGame = new Game();

    private void NavigateToEditGame()
    {
        Navigation.NavigateTo($"/editgame/{Id}");
    }
    private void EditGame()
    {
        // Create a copy of the game to edit
        editedGame = new Game
        {
            Id = game.Id,
            GroupA = game.GroupA,
            GroupAMember2 = game.GroupAMember2,
            GroupB = game.GroupB,
            GroupBMember2 = game.GroupBMember2,
            Date = game.Date,
            IsCompleted = game.IsCompleted,
            Winner = game.Winner
        };
    
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task SaveEdit()
    {
        try
        {
            // Keep the rounds reference
            editedGame.Rounds = game.Rounds;
        
            // Save the edited game
            await DbService.SaveGameAsync(editedGame);
        
            // Refresh the game data
            game = await DbService.GetGameAsync(Id) ?? new Game();
        
            // Close the modal
            isEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving game edit: {ex.Message}");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        game = await DbService.GetGameAsync(Id) ?? new Game();
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/");
    }

    private void NewGame()
    {
        Navigation.NavigateTo("/newgame", forceLoad: true);
    }
    
    
    
    private async Task FinishEdit()
    {
        isEditing = false;
        game = await DbService.GetGameAsync(Id) ?? new Game();
    }
}