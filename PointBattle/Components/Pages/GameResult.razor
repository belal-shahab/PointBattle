@page "/gameresult/{Id:int}"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject LocalizationService Loc
@implements IDisposable

<div class="result-container">
    <div class="back-button-container">
        <button class="back-button" @onclick="BackToHome">
            <span>‚Üê</span>
            <LocalizedText Key="Back" />
        </button>
    </div>

    <div class="game-result-header">
        <h2><LocalizedText Key="GameResult" /></h2>
    </div>

    <div class="players-scores-container">
        <!-- Scores Row with Names Above -->
        <div class="scores-row">
            <div class="player-section">
                <div class="player-name-label">@game.GroupA</div>
                <div class="player-score-box @(game.GroupATotal > game.GroupBTotal ? "winner-score" : "")">
                    @game.GroupATotal
                </div>
            </div>
            
            <div class="vs-score-separator"><LocalizedText Key="VS"/></div>
            
            <div class="player-section">
                <div class="player-name-label">@game.GroupB</div>
                <div class="player-score-box @(game.GroupBTotal > game.GroupATotal ? "winner-score" : "")">
                    @game.GroupBTotal
                </div>
            </div>
        </div>
    </div>

    @if (game.GroupATotal > game.GroupBTotal)
    {
        <div class="winner-announcement">
            <h2 class="winner-text">üéâ @game.GroupA <LocalizedText Key="WinsExcl" /></h2>
        </div>
    }
    else if (game.GroupBTotal > game.GroupATotal)
    {
        <div class="winner-announcement">
            <h2 class="winner-text">üéâ @game.GroupB <LocalizedText Key="WinsExcl" /></h2>
        </div>
    }
    else
    {
        <div class="winner-announcement tie-announcement">
            <h2 class="winner-text">ü§ù <LocalizedText Key="ItsATie" /></h2>
        </div>
    }

    <div class="round-summary">
        <h3><LocalizedText Key="RoundSummary" /></h3>
        <div class="rounds-table">
            <table>
                <thead>
                <tr>
                    <th><LocalizedText Key="Round" /></th>
                    <th>@game.GroupA</th>
                    <th>@game.GroupB</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var round in game.Rounds)
                {
                    <tr>
                        <td><LocalizedText Key="Round" /> @round.RoundNumber</td>
                        <td>@round.GroupAPoints</td>
                        <td>@round.GroupBPoints</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <div class="button-container rtl-direction">
        <button class="btn secondary" @onclick="BackToHome"><LocalizedText Key="Home" /></button>
        <button class="btn warning" @onclick="NavigateToEditGame"><LocalizedText Key="Edit" /></button>
        <button class="btn primary" @onclick="NewGame"><LocalizedText Key="NewGame" /></button>
    </div>
    
    @if (isEditing)
    {
        <div class="modal-overlay" @onclick="CancelEdit">
            <div class="modal" @onclick:stopPropagation="true">
                <h3><LocalizedText Key="EditGame" /></h3>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team1" /> <LocalizedText Key="Player1" />:</label>
                    <input type="text" @bind="editedGame.GroupA" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team1" /> <LocalizedText Key="Player2" />:</label>
                    <input type="text" @bind="editedGame.GroupAMember2" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team2" /> <LocalizedText Key="Player1" />:</label>
                    <input type="text" @bind="editedGame.GroupB" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team2" /> <LocalizedText Key="Player2" />:</label>
                    <input type="text" @bind="editedGame.GroupBMember2" />
                </div>
            
                <div class="modal-actions rtl-direction">
                    <button class="btn secondary" @onclick="CancelEdit"><LocalizedText Key="Cancel" /></button>
                    <button class="btn primary" @onclick="SaveEdit"><LocalizedText Key="Save" /></button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Game game = new Game();
    private bool isEditing = false;
    private Game editedGame = new Game();

    private void NavigateToEditGame()
    {
        Navigation.NavigateTo($"/editgame/{Id}");
    }
    
    private void EditGame()
    {
        editedGame = new Game
        {
            Id = game.Id,
            GroupA = game.GroupA,
            GroupAMember2 = game.GroupAMember2,
            GroupB = game.GroupB,
            GroupBMember2 = game.GroupBMember2,
            Date = game.Date,
            IsCompleted = game.IsCompleted,
            Winner = game.Winner
        };
    
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task SaveEdit()
    {
        try
        {
            editedGame.Rounds = game.Rounds;
            await DbService.SaveGameAsync(editedGame);
            game = await DbService.GetGameAsync(Id) ?? new Game();
            isEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving game edit: {ex.Message}");
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        game = await DbService.GetGameAsync(Id) ?? new Game();
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/history");
    }

    private void NewGame()
    {
        Navigation.NavigateTo("/newgame", forceLoad: true);
    }
    
    private async Task FinishEdit()
    {
        isEditing = false;
        game = await DbService.GetGameAsync(Id) ?? new Game();
    }

    protected override void OnInitialized()
    {
        Loc.OnLanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Loc.OnLanguageChanged -= OnLanguageChanged;
    }
}