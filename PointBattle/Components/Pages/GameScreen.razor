@page "/game/{Id:int}"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LocalizationService Loc
@implements IDisposable

<div class="game-container">
    @if (loading)
    {
        <div class="loading">
            <p><LocalizedText Key="Loading" /></p>
        </div>
    }
    else if (loadError)
    {
        <div class="alert alert-danger">
            <p>Error loading game: @errorMessage</p>
            <button class="btn primary" @onclick="BackToHome"><LocalizedText Key="Back" /></button>
        </div>
    }
    else
    {
        <div class="header">
            <h2 class="game-title"><LocalizedText Key="GameInProgress" /></h2>

            <!-- Replace the existing score-container section with this -->
            <div class="score-container">
                <div class="scores-row">
                    <div class="player-section">
                        <div class="player-name-label">@game.GroupAFullName</div>
                        <div class="player-score-box @(game.GroupATotal > game.GroupBTotal ? "winning" : "")">
                            @game.GroupATotal
                        </div>
                    </div>
        
                    <div class="vs-score-separator"><LocalizedText Key="VS"/></div>
        
                    <div class="player-section">
                        <div class="player-name-label">@game.GroupBFullName</div>
                        <div class="player-score-box @(game.GroupBTotal > game.GroupATotal ? "winning" : "")">
                            @game.GroupBTotal
                        </div>
                    </div>
                </div>
            </div>

            @{
                int pointDifference = game.GroupATotal - game.GroupBTotal;
                string leadingTeam = pointDifference > 0 ? game.GroupAFullName : game.GroupBFullName;
            }

            @if (pointDifference != 0 && game.Rounds.Count > 0)
            {
                <div class="point-difference-display">
                    <div class="point-difference-text">
                        @leadingTeam <LocalizedText Key="LeadsBy" /> <span class="point-difference-number">@Math.Abs(pointDifference)</span> @(Math.Abs(pointDifference) != 1 ? Loc.GetString("PointsWord") : Loc.GetString("PointWord"))
                    </div>
                </div>
            }
            else if (game.Rounds.Count > 0)
            {
                <div class="point-difference-display tie">
                    <div class="point-difference-text"><LocalizedText Key="TeamsAreTied" /></div>
                </div>
            }

            @if (game.Rounds.Count > 0)
            {
                @if (game.IsGroupAWinConfirmed())
                {
                    <div class="alert alert-success">
                        <strong>@game.GroupA <LocalizedText Key="HasAlreadyWon" /></strong>
                        @game.GroupB <LocalizedText Key="Needs" /> @game.PointsNeededForGroupB() <LocalizedText Key="PointsWord" /> <LocalizedText Key="ButOnly" /> @((Game.MaxRounds - game.Rounds.Count) * Game.MaxPointsPerRound) <LocalizedText Key="ArePossibleInRemainingRounds" />
                    </div>
                }
                else if (game.IsGroupBWinConfirmed())
                {
                    <div class="alert alert-success">
                        <strong>@game.GroupB <LocalizedText Key="HasAlreadyWon" /></strong>
                        @game.GroupA <LocalizedText Key="Needs" /> @game.PointsNeededForGroupA() <LocalizedText Key="PointsWord" /> <LocalizedText Key="ButOnly" /> @((Game.MaxRounds - game.Rounds.Count) * Game.MaxPointsPerRound) <LocalizedText Key="ArePossibleInRemainingRounds" />
                    </div>
                }
            }

            <div class="round-counter">
                <LocalizedText Key="RoundOf" /> @(game.Rounds.Count) <LocalizedText Key="Of" /> @Game.MaxRounds
            </div>
        </div>

        <div class="rounds-container">
            <h3><LocalizedText Key="Rounds" /></h3>
            @foreach (var round in game.Rounds)
            {
                <div class="round">
                    <div class="round-header"><LocalizedText Key="Round" /> @round.RoundNumber</div>
                    <div class="round-scores">
                        <div class="round-score">@round.GroupAPoints</div>
                        <div class="round-score">@round.GroupBPoints</div>
                    </div>
                    <div class="round-actions">
                        <button class="edit-button" @onclick="() => NavigateToEditRound(round)"><LocalizedText Key="Edit" /></button>
                        <button class="delete-button" @onclick="() => DeleteRound(round)"><LocalizedText Key="Delete" /></button>
                    </div>
                </div>
            }
        </div>

        @if (game.Rounds.Count < Game.MaxRounds && !game.IsCompleted)
        {
            <div class="new-round" id="new-round-section">
                <h3><LocalizedText Key="NewRound" /></h3>
                <div class="input-group">
                    <label>@game.GroupA</label>
                    <input type="number" 
                           value="@newRoundA" 
                           @onfocus="e => ClearDefaultValue(e, true)"
                           @onchange="e => newRoundA = int.Parse(e.Value.ToString())"
                           max="@Game.MaxPointsPerRound"
                           @ref="teamAInputRef"/>
                    <span class="helper-text"><LocalizedText Key="Max" />: @Game.MaxPointsPerRound</span>
                </div>
                <div class="input-group">
                    <label>@game.GroupB</label>
                    <input type="number" 
                           value="@newRoundB" 
                           @onfocus="e => ClearDefaultValue(e, false)" 
                           @onchange="e => newRoundB = int.Parse(e.Value.ToString())"
                           max="@Game.MaxPointsPerRound"
                           @ref="teamBInputRef"/>
                    <span class="helper-text"><LocalizedText Key="Max" />: @Game.MaxPointsPerRound</span>
                </div>
                <button class="btn primary" @onclick="AddRound"><LocalizedText Key="AddRound" /></button>
            </div>
        }

        @if (editingRound != null)
        {
            <div class="modal-overlay" @onclick="CancelEdit">
                <div class="modal" @onclick:stopPropagation="true">
                    <h3><LocalizedText Key="EditRound" /> @editingRound.RoundNumber</h3>
                    <div class="input-group">
                        <label>@game.GroupA</label>
                        <input type="number" @bind="editingRoundA" min="0" max="@Game.MaxPointsPerRound"/>
                    </div>
                    <div class="input-group">
                        <label>@game.GroupB</label>
                        <input type="number" @bind="editingRoundB" min="0" max="@Game.MaxPointsPerRound"/>
                    </div>
                    <div class="modal-actions">
                        <button class="btn secondary" @onclick="CancelEdit"><LocalizedText Key="Cancel" /></button>
                        <button class="btn primary" @onclick="SaveEdit"><LocalizedText Key="Save" /></button>
                    </div>
                </div>
            </div>
        }

        <div class="actions">
            <button class="btn secondary" @onclick="BackToHome"><LocalizedText Key="Home" /></button>
            <button class="btn warning" @onclick="FinishGame"><LocalizedText Key="EndGame" /></button>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Game game = new Game();
    private int newRoundA;
    private int newRoundB;
    private Round editingRound;
    private int editingRoundA;
    private int editingRoundB;
    private Round roundToDelete;
    private bool showDeleteConfirm = false;
    private bool loading = true;
    private bool loadError = false;
    private string errorMessage = "";
    private ElementReference teamAInputRef;
    private ElementReference teamBInputRef;
    private bool teamAInputClicked = false;
    private bool teamBInputClicked = false;
    
    protected override void OnInitialized()
    {
        // Subscribe to language changes
        Loc.OnLanguageChanged += OnLanguageChanged;
        base.OnInitialized();
    }
    
    private void OnLanguageChanged()
    {
        // Force UI update when language changes
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        // Unsubscribe when component is disposed
        Loc.OnLanguageChanged -= OnLanguageChanged;
    }

    private void NavigateToEditRound(Round round)
    {
        Navigation.NavigateTo($"/editround/{game.Id}/{round.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"GameScreen initializing with Id: {Id}");
        await LoadGame();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("setupInputFocus");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting up input focus: {ex.Message}");
                // Continue without failing
            }
        }
    }

    private void ClearDefaultValue(FocusEventArgs e, bool isTeamA)
    {
        if (isTeamA && !teamAInputClicked)
        {
            newRoundA = 0;
            teamAInputClicked = true;
        }
        else if (!isTeamA && !teamBInputClicked)
        {
            newRoundB = 0;
            teamBInputClicked = true;
        }

        // Scroll to make sure input stays visible
        JSRuntime.InvokeVoidAsync("scrollToInput", isTeamA ? "teamAInput" : "teamBInput");
    }

    private async Task LoadGame()
    {
        try
        {
            loading = true;
            loadError = false;
            errorMessage = "";

            Console.WriteLine($"Loading game with Id: {Id}");
            var loadedGame = await DbService.GetGameAsync(Id);

            if (loadedGame != null)
            {
                game = loadedGame;
                Console.WriteLine($"Game loaded: {game.GroupA} vs {game.GroupB}, Rounds: {game.Rounds.Count}");
            }
            else
            {
                loadError = true;
                errorMessage = $"Game with ID {Id} not found";
                Console.WriteLine("Game not found");
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = ex.Message;
            Console.WriteLine($"Error loading game: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task AddRound()
    {
        if (game.Rounds.Count >= Game.MaxRounds) return;

        try
        {
            var round = new Round
            {
                GameId = game.Id,
                RoundNumber = game.Rounds.Count + 1,
                GroupAPoints = Math.Min(newRoundA, Game.MaxPointsPerRound),
                GroupBPoints = Math.Min(newRoundB, Game.MaxPointsPerRound)
            };

            game.Rounds.Add(round);
            await DbService.SaveGameAsync(game);

            newRoundA = 0;
            newRoundB = 0;
            teamAInputClicked = false;
            teamBInputClicked = false;

            // Check if this was the last round
            if (game.Rounds.Count >= Game.MaxRounds)
            {
                await FinishGame();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding round: {ex}");
        }
    }

    private void EditRound(Round round)
    {
        editingRound = round;
        editingRoundA = round.GroupAPoints;
        editingRoundB = round.GroupBPoints;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        editingRound = null;
        StateHasChanged();
    }

    private async Task SaveEdit()
    {
        if (editingRound == null) return;

        try
        {
            // Update the round's points
            int originalId = editingRound.Id;
            int originalGameId = editingRound.GameId;
            int originalRoundNumber = editingRound.RoundNumber;
        
            // Create a new round object to avoid reference issues
            var roundToUpdate = new Round
            {
                Id = originalId,
                GameId = originalGameId,
                RoundNumber = originalRoundNumber,
                GroupAPoints = Math.Min(Math.Max(0, editingRoundA), Game.MaxPointsPerRound),
                GroupBPoints = Math.Min(Math.Max(0, editingRoundB), Game.MaxPointsPerRound)
            };
        
            // Update in database
            await DbService.UpdateRoundAsync(roundToUpdate);
        
            // Reset editing state
            editingRound = null;
        
            // Reload the game to refresh all data
            await LoadGame();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving round edit: {ex.Message}");
            editingRound = null;
        }
    }

    private void DeleteRound(Round round)
    {
        roundToDelete = round;
        showDeleteConfirm = true;
        ConfirmDelete();
    }

    private void CancelDelete()
    {
        roundToDelete = null;
        showDeleteConfirm = false;
    }

    private async Task ConfirmDelete()
    {
        if (roundToDelete != null)
        {
            try
            {
                game.Rounds.Remove(roundToDelete);

                // Update round numbers for all subsequent rounds
                int index = 1;
                foreach (var r in game.Rounds.OrderBy(r => r.RoundNumber))
                {
                    r.RoundNumber = index++;
                }

                await DbService.DeleteRoundAsync(roundToDelete.Id);
                await DbService.SaveGameAsync(game);

                roundToDelete = null;
                showDeleteConfirm = false;

                await LoadGame();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting round: {ex}");
            }
        }
    }

    private async Task FinishGame()
    {
        if (game.GroupATotal > game.GroupBTotal)
            game.Winner = game.GroupA;
        else if (game.GroupBTotal > game.GroupATotal)
            game.Winner = game.GroupB;
        else
            game.Winner = "Tie";

        game.IsCompleted = true;
        await DbService.SaveGameAsync(game);
        Navigation.NavigateTo("/gameresult/" + Id);
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/");
    }

}