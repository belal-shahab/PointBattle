@page "/history"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation

<div class="history-container">
    <h3>Today's Games</h3>
    <div class="today-games">
        @if (todayGames.Count > 0)
        {
            <div class="games-list">
                @foreach (var game in todayGames)
                {
                    <div class="game-card today-game-card">
                        <div class="game-card-content" @onclick="() => ViewGame(game.Id)">
                            <div class="game-teams">@game.GroupAFullName vs @game.GroupBFullName</div>
                            <div class="game-score">@game.GroupATotal - @game.GroupBTotal</div>
                            <div class="game-winner">
                                @if (game.GroupATotal > game.GroupBTotal)
                                {
                                    <span class="winner-text">@game.GroupAFullName wins!</span>
                                }
                                else if (game.GroupBTotal > game.GroupATotal)
                                {
                                    <span class="winner-text">@game.GroupBFullName wins!</span>
                                }
                                else
                                {
                                    <span>Tie game</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No games played today.</p>
        }
    </div>
    <h2>Game Dashboard</h2>

    @if (games.Count == 0)
    {
        <p>No games played yet!</p>
    }
    else
    {
        <div class="dashboard-stats">
            <div class="stat-card">
                <div class="stat-title">Total Games</div>
                <div class="stat-value">@games.Count</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Completed Games</div>
                <div class="stat-value">@games.Count(g => g.IsCompleted)</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">In Progress</div>
                <div class="stat-value">@games.Count(g => !g.IsCompleted)</div>
            </div>
        </div>

        <div class="player-stats-container">
            <h3>Player Statistics</h3>
            <div class="player-stats">
                @foreach (var player in GetPlayerStats())
                {
                    <div class="player-stat-card">
                        <div class="player-name">@player.Name</div>
                        <div class="player-record">
                            <span class="wins">@player.Wins W</span> /
                            <span class="losses">@player.Losses L</span> /
                            <span class="ties">@player.Ties T</span>
                        </div>
                        <div class="player-points">Total Points: @player.TotalPoints</div>
                    </div>
                }
            </div>
        </div>

        <h3>Recent Games</h3>
        <div class="games-list">
            @foreach (var game in games.OrderByDescending(g => g.Date))
            {
                <div class="game-card">
                    <div class="game-card-content" @onclick="() => ViewGame(game.Id)">
                        <div class="game-date">@game.Date.ToString("MMM d, yyyy")</div>
                        <div class="game-teams">@game.GroupAFullName vs @game.GroupBFullName</div>
                        <div class="game-score">@game.GroupATotal - @game.GroupBTotal</div>
                        <div class="game-winner">
                            @if (game.GroupATotal > game.GroupBTotal)
                            {
                                <span class="winner-text">@game.GroupAFullName wins!</span>
                            }
                            else if (game.GroupBTotal > game.GroupATotal)
                            {
                                <span class="winner-text">@game.GroupBFullName wins!</span>
                            }
                            else
                            {
                                <span>Tie game</span>
                            }
                        </div>
                    </div>
                    <div class="game-card-actions">
                        <button class="delete-button" @onclick="() => DeleteGame(game.Id)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }

    <div class="button-container">
        <button class="btn secondary" @onclick="BackToHome">Back</button>
    </div>
</div>

@code {
    private List<Game> games = new List<Game>();
    private int gameIdToDelete = 0;

   
    private async Task LoadGames()
    {
        games = await DbService.GetGamesAsync();
    }

    private void ViewGame(int id)
    {
        Navigation.NavigateTo($"/gameresult/{id}");
    }

    private async void DeleteGame(int id)
    {
        gameIdToDelete = id;
        await DbService.DeleteGameAsync(gameIdToDelete);
        await LoadGames();
        StateHasChanged();
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/");
    }

// Get player statistics
    private List<PlayerStat> GetPlayerStats()
    {
        var stats = new Dictionary<string, PlayerStat>();

        foreach (var game in games)
        {
// Process Group A
            ProcessPlayer(stats, game.GroupA, game.GroupATotal, game.GroupBTotal);
            if (!string.IsNullOrEmpty(game.GroupAMember2))
                ProcessPlayer(stats, game.GroupAMember2, game.GroupATotal, game.GroupBTotal);

// Process Group B
            ProcessPlayer(stats, game.GroupB, game.GroupBTotal, game.GroupATotal);
            if (!string.IsNullOrEmpty(game.GroupBMember2))
                ProcessPlayer(stats, game.GroupBMember2, game.GroupBTotal, game.GroupATotal);
        }

        return stats.Values
            .OrderByDescending(p => p.Wins)
            .ThenByDescending(p => p.TotalPoints)
            .ToList();
    }

    private void ProcessPlayer(Dictionary<string, PlayerStat> stats, string playerName, int teamPoints, int opponentPoints)
    {
        if (string.IsNullOrEmpty(playerName)) return;

        if (!stats.ContainsKey(playerName))
        {
            stats[playerName] = new PlayerStat { Name = playerName };
        }

        var player = stats[playerName];
        player.TotalPoints += teamPoints;

        if (teamPoints > opponentPoints)
            player.Wins++;
        else if (teamPoints < opponentPoints)
            player.Losses++;
        else
            player.Ties++;
    }

    private class PlayerStat
    {
        public string Name { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public int Ties { get; set; }
        public int TotalPoints { get; set; }
    }

    private List<Game> todayGames = new List<Game>();

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();

        // Filter today's games
        todayGames = games.Where(g => g.Date.Date == DateTime.Today).ToList();
    }

}