@page "/history"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject LocalizationService Loc
@implements IDisposable

<div class="history-container">
    <h2><LocalizedText Key="GameDashboard" /></h2>

    @if (games.Count == 0)
    {
        <p><LocalizedText Key="NoGamesYet" /></p>
    }
    else
    {
        <div class="dashboard-stats">
            <div class="stat-card">
                <div class="stat-title"><LocalizedText Key="TotalGames" /></div>
                <div class="stat-value">@games.Count</div>
            </div>
            <div class="stat-card">
                <div class="stat-title"><LocalizedText Key="CompletedGames" /></div>
                <div class="stat-value">@games.Count(g => g.IsCompleted)</div>
            </div>
            <div class="stat-card">
                <div class="stat-title"><LocalizedText Key="InProgress" /></div>
                <div class="stat-value">@games.Count(g => !g.IsCompleted)</div>
            </div>
        </div>

        <h3><LocalizedText Key="TodaysGames" /></h3>
        <div class="today-games">
            @if (todayGames.Count > 0)
            {
                <div class="games-list">
                    @foreach (var game in todayGames)
                    {
                        <div class="game-card today-game-card">
                            <div class="game-card-content" @onclick="() => ViewGame(game.Id)">
                                <div class="game-date">@game.Date.ToString("h:mm tt")</div>
                                <div class="game-teams">@game.GroupAFullName <LocalizedText Key="VS" /> @game.GroupBFullName</div>
                                <div class="game-score">@game.GroupATotal - @game.GroupBTotal</div>
                                <div class="game-winner">
                                    @if (game.GroupATotal > game.GroupBTotal)
                                    {
                                        <span class="winner-text">@game.GroupAFullName <LocalizedText Key="WinsExcl" /></span>
                                    }
                                    else if (game.GroupBTotal > game.GroupATotal)
                                    {
                                        <span class="winner-text">@game.GroupBFullName <LocalizedText Key="WinsExcl" /></span>
                                    }
                                    else
                                    {
                                        <span><LocalizedText Key="TieGame" /></span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p><LocalizedText Key="NoGamesToday" /></p>
            }
        </div>

        <div class="player-stats-container">
            <h3><LocalizedText Key="PlayerStats" /></h3>
            <p><LocalizedText Key="ClickToViewDetail" /></p>
            <div class="player-stats">
                @foreach (var player in GetPlayerStats())
                {
                    <div class="player-stat-card" @onclick="() => ViewPlayerDetails(player.Name)">
                        <div class="player-name">@player.Name</div>
                        <div class="player-record">
                            <span class="wins">@player.Wins W</span> /
                            <span class="losses">@player.Losses L</span> /
                            <span class="ties">@player.Ties T</span>
                        </div>
                        <div class="player-points"><LocalizedText Key="TotalPoints" />: @player.TotalPoints</div>
                        <div class="player-winrate"><LocalizedText Key="WinRate" />: @(CalculateWinRate(player.Wins, player.Losses, player.Ties).ToString("0.0"))%</div>
                        <div class="view-profile"><LocalizedText Key="ViewProfile" /> â†’</div>
                    </div>
                }
            </div>
        </div>

        <h3><LocalizedText Key="RecentGames" /></h3>
        <div class="games-list">
            @foreach (var game in games.OrderByDescending(g => g.Date).Take(5))
            {
                <div class="game-card">
                    <div class="game-card-content" @onclick="() => ViewGame(game.Id)">
                        <div class="game-date">@game.Date.ToString("MMM d, yyyy")</div>
                        <div class="game-teams">@game.GroupAFullName <LocalizedText Key="VS" /> @game.GroupBFullName</div>
                        <div class="game-score">@game.GroupATotal - @game.GroupBTotal</div>
                        <div class="game-winner">
                            @if (game.GroupATotal > game.GroupBTotal)
                            {
                                <span class="winner-text">@game.GroupAFullName <LocalizedText Key="WinsExcl" /></span>
                            }
                            else if (game.GroupBTotal > game.GroupATotal)
                            {
                                <span class="winner-text">@game.GroupBFullName <LocalizedText Key="WinsExcl" /></span>
                            }
                            else
                            {
                                <span><LocalizedText Key="TieGame" /></span>
                            }
                        </div>
                    </div>
                    <div class="game-card-actions">
                        <button class="edit-button" @onclick:stopPropagation="true" @onclick="() => NavigateToEditGame(game.Id)"><LocalizedText Key="Edit" /></button>
                        <button class="delete-button" @onclick:stopPropagation="true" @onclick="() => DeleteGame(game.Id)"><LocalizedText Key="Delete" /></button>
                    </div>
                </div>
            }
        </div>
        
        @if (games.Count > 5)
        {
            <div class="see-all-games">
                <button class="btn secondary" @onclick="ViewAllGames"><LocalizedText Key="SeeAllGames" /></button>
            </div>
        }
    }

    <div class="button-container">
        <button class="btn secondary" @onclick="BackToHome"><LocalizedText Key="Back" /></button>
    </div>
    @if (gameToEdit != null)
    {
        <div class="modal-overlay" @onclick="CancelEdit">
            <div class="modal" @onclick:stopPropagation="true">
                <h3><LocalizedText Key="EditGame" /></h3>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team1" /> <LocalizedText Key="Player1" />:</label>
                    <input type="text" @bind="gameToEdit.GroupA" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team1" /> <LocalizedText Key="Player2" />:</label>
                    <input type="text" @bind="gameToEdit.GroupAMember2" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team2" /> <LocalizedText Key="Player1" />:</label>
                    <input type="text" @bind="gameToEdit.GroupB" />
                </div>
            
                <div class="input-group">
                    <label><LocalizedText Key="Team2" /> <LocalizedText Key="Player2" />:</label>
                    <input type="text" @bind="gameToEdit.GroupBMember2" />
                </div>
            
                <div class="modal-actions">
                    <button class="btn secondary" @onclick="CancelEdit"><LocalizedText Key="Cancel" /></button>
                    <button class="btn primary" @onclick="SaveEdit"><LocalizedText Key="Save" /></button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Game> games = new List<Game>();
    private List<Game> todayGames = new List<Game>();
    private bool showAllGames = false;
    private Game gameToEdit = null;

    
    private void NavigateToEditGame(int gameId)
    {
        Navigation.NavigateTo($"/editgame/{gameId}");
    }
    private void EditGame(Game game)
    {
        // Create a copy of the game to edit
        gameToEdit = new Game
        {
            Id = game.Id,
            GroupA = game.GroupA,
            GroupAMember2 = game.GroupAMember2,
            GroupB = game.GroupB,
            GroupBMember2 = game.GroupBMember2,
            Date = game.Date,
            IsCompleted = game.IsCompleted,
            Winner = game.Winner
        };
    }

    private void CancelEdit()
    {
        gameToEdit = null;
    }

    private async Task SaveEdit()
    {
        try
        {
            if (gameToEdit != null)
            {
                // Load the original game to get the rounds
                var originalGame = await DbService.GetGameAsync(gameToEdit.Id);
                if (originalGame != null)
                {
                    gameToEdit.Rounds = originalGame.Rounds;
                }
            
                // Save the edited game
                await DbService.SaveGameAsync(gameToEdit);
            
                // Reload all games
                await LoadGames();
            
                // Close the modal
                gameToEdit = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving game edit: {ex.Message}");
        }
    }
    

    private async Task FinishEdit()
    {
        gameToEdit = null;
        await LoadGames();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
        
        // Filter today's games
        todayGames = games.Where(g => g.Date.Date == DateTime.Today).ToList();
    }

    private async Task LoadGames()
    {
        games = await DbService.GetGamesAsync();
    }

    private void ViewGame(int id)
    {
        Navigation.NavigateTo($"/gameresult/{id}");
    }

    private void ViewPlayerDetails(string playerName)
    {
        Navigation.NavigateTo($"/player/{Uri.EscapeDataString(playerName)}");
    }

    private void ViewAllGames()
    {
        Navigation.NavigateTo("/allgames");
    }

    private async void DeleteGame(int id)
    {
        await DbService.DeleteGameAsync(id);
        await LoadGames();
        StateHasChanged();
    }

    private void BackToHome()
    {
        Navigation.NavigateTo("/");
    }

    private List<PlayerStat> GetPlayerStats()
    {
        var stats = new Dictionary<string, PlayerStat>();

        foreach (var game in games)
        {
            // Process Group A
            ProcessPlayer(stats, game.GroupA, game.GroupATotal, game.GroupBTotal);
            if (!string.IsNullOrEmpty(game.GroupAMember2))
                ProcessPlayer(stats, game.GroupAMember2, game.GroupATotal, game.GroupBTotal);

            // Process Group B
            ProcessPlayer(stats, game.GroupB, game.GroupBTotal, game.GroupATotal);
            if (!string.IsNullOrEmpty(game.GroupBMember2))
                ProcessPlayer(stats, game.GroupBMember2, game.GroupBTotal, game.GroupATotal);
        }

        return stats.Values
            .OrderByDescending(p => p.Wins)
            .ThenByDescending(p => p.TotalPoints)
            .ToList();
    }

    private double CalculateWinRate(int wins, int losses, int ties)
    {
        int totalGames = wins + losses + ties;
        if (totalGames == 0) return 0;
        return (wins * 100.0) / totalGames;
    }

    private void ProcessPlayer(Dictionary<string, PlayerStat> stats, string playerName, int teamPoints, int opponentPoints)
    {
        if (string.IsNullOrEmpty(playerName)) return;

        if (!stats.ContainsKey(playerName))
        {
            stats[playerName] = new PlayerStat { Name = playerName };
        }

        var player = stats[playerName];
        player.TotalPoints += teamPoints;

        if (teamPoints > opponentPoints)
            player.Wins++;
        else if (teamPoints < opponentPoints)
            player.Losses++;
        else
            player.Ties++;
    }

    private class PlayerStat
    {
        public string Name { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public int Ties { get; set; }
        public int TotalPoints { get; set; }
    }

    protected override void OnInitialized()
    {
        // Subscribe to language changes
        Loc.OnLanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        // Update UI when language changes
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        Loc.OnLanguageChanged -= OnLanguageChanged;
    }
}