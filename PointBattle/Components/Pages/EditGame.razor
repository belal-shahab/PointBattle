@page "/editgame/{Id:int}"
@using PointBattle.Models
@using PointBattle.Services
@inject DatabaseService DbService
@inject NavigationManager Navigation
@inject LocalizationService Loc
@implements IDisposable

<div class="container">
    <h2><LocalizedText Key="EditGame" /></h2>

    @if (loading)
    {
        <div class="loading"><LocalizedText Key="Loading" /></div>
    }
    else
    {
        <div class="teams-container">
            <div class="team-setup">
                <h3><LocalizedText Key="Team1" /></h3>
                <div class="form-group">
                    <label><LocalizedText Key="Player1" />:</label>
                    <input list="player-names" @bind="game.GroupA" placeholder="@Loc.GetString("PlayerName")"/>
                </div>
                <div class="form-group">
                    <label><LocalizedText Key="Player2" />:</label>
                    <input list="player-names" @bind="game.GroupAMember2" placeholder="@Loc.GetString("PlayerName")"/>
                </div>
            </div>

            <div class="team-setup">
                <h3><LocalizedText Key="Team2" /></h3>
                <div class="form-group">
                    <label><LocalizedText Key="Player1" />:</label>
                    <input list="player-names" @bind="game.GroupB" placeholder="@Loc.GetString("PlayerName")"/>
                </div>
                <div class="form-group">
                    <label><LocalizedText Key="Player2" />:</label>
                    <input list="player-names" @bind="game.GroupBMember2" placeholder="@Loc.GetString("PlayerName")"/>
                </div>
            </div>
        </div>

        <datalist id="player-names">
            @foreach (var name in playerNames)
            {
                <option value="@name"/>
            }
        </datalist>

        <h3><LocalizedText Key="EditRound" /></h3>
        <div class="rounds-container">
            @if (game.Rounds.Count > 0)
            {
                <div class="rounds-table">
                    <table>
                        <thead>
                        <tr>
                            <th><LocalizedText Key="Round" /></th>
                            <th>@game.GroupA</th>
                            <th>@game.GroupB</th>
                        </tr>
                        </thead>
                        <tbody>
                        @for (int i = 0; i < game.Rounds.Count; i++)
                        {
                            var index = i;
                            <tr>
                                <td><LocalizedText Key="Round" /> @game.Rounds[index].RoundNumber</td>
                                <td>
                                    <input type="number" 
                                           min="0" 
                                           max="@Game.MaxPointsPerRound" 
                                           @bind="game.Rounds[index].GroupAPoints" 
                                           style="width: 80px; text-align: center;" />
                                </td>
                                <td>
                                    <input type="number" 
                                           min="0" 
                                           max="@Game.MaxPointsPerRound" 
                                           @bind="game.Rounds[index].GroupBPoints" 
                                           style="width: 80px; text-align: center;" />
                                </td>
                            </tr>
                        }
                        </tbody>
                        <tfoot>
                        <tr>
                            <th><LocalizedText Key="Total" /></th>
                            <th>@game.GroupATotal</th>
                            <th>@game.GroupBTotal</th>
                        </tr>
                        </tfoot>
                    </table>
                </div>
            }
            else
            {
                <p><LocalizedText Key="NoRounds" /></p>
            }
        </div>

        <div class="button-container">
            <button class="btn secondary" @onclick="Cancel"><LocalizedText Key="Cancel" /></button>
            <button class="btn primary" @onclick="SaveGame"><LocalizedText Key="SaveAllChanges" /></button>
        </div>
    }
</div>
@code {
    [Parameter] public int Id { get; set; }
    
    private Game game = new Game();
    private List<string> playerNames = new List<string>();
    private bool loading = true;
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        // Load the game data
        game = await DbService.GetGameAsync(Id) ?? new Game();
        
        // Load player names for autocomplete
        playerNames = await DbService.GetAllPlayerNamesAsync();
        
        loading = false;
    }

    protected override void OnInitialized()
    {
        // Subscribe to language changes
        Loc.OnLanguageChanged += OnLanguageChanged;
        base.OnInitialized();
    }

    private void OnLanguageChanged()
    {
        // Update UI when language changes
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        Loc.OnLanguageChanged -= OnLanguageChanged;
    }
    
    private void Cancel()
    {
        // Return to the previous page or game details
        if (game.IsCompleted)
        {
            Navigation.NavigateTo($"/gameresult/{Id}");
        }
        else
        {
            Navigation.NavigateTo($"/game/{Id}");
        }
    }
    
    private async Task SaveGame()
    {
        try
        {
            // Validate all round scores are within range
            foreach (var round in game.Rounds)
            {
                round.GroupAPoints = Math.Min(Math.Max(0, round.GroupAPoints), Game.MaxPointsPerRound);
                round.GroupBPoints = Math.Min(Math.Max(0, round.GroupBPoints), Game.MaxPointsPerRound);
            }
            
            // Make sure the game's winner field is updated based on the new scores
            UpdateWinner();
            
            // Save the game and all its rounds
            await DbService.SaveGameWithRoundsAsync(game);
            
            // Return to the appropriate page
            if (game.IsCompleted)
            {
                Navigation.NavigateTo($"/gameresult/{Id}");
            }
            else
            {
                Navigation.NavigateTo($"/game/{Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving game changes: {ex.Message}");
        }
    }
    
    // Update the winner field based on current scores
    private void UpdateWinner()
    {
        if (game.GroupATotal > game.GroupBTotal)
            game.Winner = game.GroupA;
        else if (game.GroupBTotal > game.GroupATotal)
            game.Winner = game.GroupB;
        else
            game.Winner = "Tie";
    }
}